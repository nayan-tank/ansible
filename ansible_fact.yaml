---
tasks:
  - name: Shut down Debian flavored systems
    ansible.builtin.command: /sbin/shutdown -t now
    when: ansible_facts['os_family'] == "Debian"

---
tasks:
  - name: Get the CPU temperature
    set_fact:
      temperature: "{{ ansible_facts['cpu_temperature'] }}"

  - name: Restart the system if the temperature is too high
    when: temperature | float > 90
    shell: "reboot"

---
# You can access the string contents of the registered variable using variable.stdout. For example:
tasks:
  - name: Register a variable
    ansible.builtin.shell: cat /etc/motd
    register: motd_contents

  - name: Use the variable in conditional statement
    ansible.builtin.shell: echo "motd contains the word hi"
    when: motd_contents.stdout.find('hi') != -1

---
- name: check registered variable for emptiness
  hosts: all
  tasks:
    - name: List contents of directory
      ansible.builtin.command: ls mydir
      register: contents

    - name: Check contents for emptiness
      ansible.builtin.debug:
        msg: "Directory is empty"
      when: contents.stdout == ""

---
tasks:
  - name: Register a variable, ignore errors and continue
    ansible.builtin.command: /bin/false
    register: result
    ignore_errors: true

  - name: Run only if the task that registered the "result" variable fails
    ansible.builtin.command: /bin/something
    when: result is failed

  - name: Run only if the task that registered the "result" variable succeeds
    ansible.builtin.command: /bin/something_else
    when: result is succeeded

  - name: Run only if the task that registered the "result" variable is skipped
    ansible.builtin.command: /bin/still/something_else
    when: result is skipped

  - name: Run only if the task that registered the "result" variable changed something.
    ansible.builtin.command: /bin/still/something_else
    when: result is changed

---
vars:
  epic: true
  monumental: "yes"

tasks:
  - name: Run the command if "epic" or "monumental" is true
    ansible.builtin.shell: echo "This certainly is epic!"
    when: epic or monumental | bool

  - name: Run the command if "epic" is false
    ansible.builtin.shell: echo "This certainly isn't epic!"
    when: not epic

---
tasks:
  - name: Run the command if "foo" is defined
    ansible.builtin.shell: echo "I've got '{{ foo }}' and am not afraid to use it!"
    when: foo is defined

---
tasks:
  - name: Run with items greater than 5
    ansible.builtin.command: echo {{ item }}
    loop: [0, 2, 4, 6, 8, 10]
    when: item > 5

---

# all tasks within an imported file inherit the condition from the import statement
# main.yml
- hosts: all
  tasks:
  - import_tasks: other_tasks.yml # note "import"
    when: x is not defined

# other_tasks.yml
- name: Set a variable
  ansible.builtin.set_fact:
    x: foo

- name: Print a variable
  ansible.builtin.debug:
    var: x

#Ansible expands this at execution time to the equivalent of:
---
- name: Set a variable if not defined
  ansible.builtin.set_fact:
    x: foo
  when: x is not defined
  # this task sets a value for x

- name: Do the task if "x" is not defined
  ansible.builtin.debug:
    var: x
  when: x is not defined
  # Ansible skips this task, because x is now defined

---
#If this is not the behavior you want, use an include_* statement to apply a condition only to that statement itself.

# using a conditional on include_* only applies to the include task itself
# main.yml
- hosts: all
  tasks:
  - include_tasks: other_tasks.yml # note "include"
    when: x is not defined

---
# default variable 
- name: Touch files with an optional mode
  ansible.builtin.file:
    dest: "{{ item.path }}"
    state: touch
    mode: "{{ item.mode | default(omit) }}"
  loop:
    - path: /tmp/foo
    - path: /tmp/bar
    - path: /tmp/baz
      mode: "0444"
---
#If you want to use the default value when variables evaluate to false or an empty string you have to set the second parameter to true:
# {{ lookup('env', 'MY_USER') | default('admin', true) }}

---
